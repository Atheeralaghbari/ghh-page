{"version":3,"sources":["Posts.js","App.js","serviceWorker.js","index.js"],"names":["Post","className","this","props","first","id","price","perMonth","middle","inner","MB","bandwidth","space","btn","React","Component","deafultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAEMA,E,iLAEA,OACC,6BACC,yBAAKC,UAAWC,KAAKC,MAAMC,OAE3B,wBAAIC,GAAG,SAAP,KAAiB,yBAAKA,GAAG,UAAR,KAAyBH,KAAKC,MAAMG,MAArD,KACA,wBAAID,GAAG,SAASH,KAAKC,MAAMI,UAC3B,wBAAIF,GAAG,UAAUH,KAAKC,MAAMK,SAG5B,yBAAKP,UAAWC,KAAKC,MAAMM,OAC3B,uBAAGJ,GAAG,MAAMH,KAAKC,MAAMO,IACvB,uBAAGL,GAAG,aAAaH,KAAKC,MAAMQ,WAC9B,uBAAGN,GAAG,SAASH,KAAKC,MAAMS,OAC1B,4BAAQP,GAAG,OAAOH,KAAKC,MAAMU,W,GAflBC,IAAMC,WAwBRf,IACfA,EAAKgB,aAAa,CAChBZ,MAAM,QACJE,MAAM,KACNC,SAAS,YACTC,OAAO,mBACPC,MAAM,QACNC,GAAG,gBACHC,UAAU,oBACVC,MAAM,GACNC,IAAI,I,YCVKI,MAtBf,WACE,OACE,yBAAKhB,UAAU,WAChB,yBAAKA,UAAU,UACf,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMG,MAAM,QAAQK,MAAM,QAAQH,MAAM,KAAKC,SAAS,YAAYC,OAAO,eAAeE,GAAG,gBAAgBC,UAAU,sBAAsBC,MAAM,wBAAwBC,IAAI,cAI7K,yBAAKZ,UAAU,OACf,kBAAC,EAAD,CAAMG,MAAM,SAASK,MAAM,QAAQH,MAAM,KAAKC,SAAS,YAAYC,OAAO,YAAYE,GAAG,gBAAgBC,UAAU,sBAAsBC,MAAM,wBAAwBC,IAAI,cAG3K,yBAAKZ,UAAU,OACf,kBAAC,EAAD,CAAOG,MAAM,QAAQK,MAAM,QAAQH,MAAM,KAAKC,SAAS,YAAYC,OAAO,aAAaE,GAAG,kBAAkBC,UAAU,sBAAsBC,MAAM,yBAAyBC,IAAI,iBCNhKK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2fdcbf1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Post extends React.Component {\r\n    render() {\r\n      return (\r\n       <div>\r\n        <div className={this.props.first}>\r\n       \r\n        <h1 id=\"price\">  <sup id=\"dollar\">$</sup>{this.props.price} </h1>\r\n        <h5 id=\"month\">{this.props.perMonth}</h5>\r\n        <h3 id=\"middle\">{this.props.middle}</h3>\r\n        </div>\r\n\r\n        <div className={this.props.inner}>\r\n        <p id=\"mb\">{this.props.MB}</p>\r\n        <p id=\"bandwidth\">{this.props.bandwidth}</p>\r\n        <p id=\"space\">{this.props.space}</p>\r\n        <button id=\"btn\">{this.props.btn}</button>\r\n        </div>\r\n        </div>\r\n      \r\n      \r\n      )\r\n    }\r\n  }\r\n\r\n  export default Post;\r\n  Post.deafultProps={\r\n    first:\"first\",\r\n      price:\"20\",\r\n      perMonth:\"Per Month\",\r\n      middle:\"Not Professional\",\r\n      inner:\"more1\",\r\n      MB:\"265 MB Memory\",\r\n      bandwidth:\"limited Bandwidth\",\r\n      space:\"\",\r\n      btn:\"\",\r\n\r\n  }","import React from 'react';\nimport Post from './Posts';\nimport './App.css';\nimport './style.css'\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n   <div className=\"poster\">\n   <div className=\"col\">\n     <Post first=\"first\" inner=\"more1\" price=\"29\" perMonth=\"Per Month\" middle=\"Professional\" MB=\"265 MB Memory\" bandwidth=\"Unlimited Bandwidth\" space=\"10 GB Amount of Space\" btn=\"PURCHASE\"> \n     </Post>\n     </div>\n\n     <div className=\"col\">\n     <Post first=\"second\" inner=\"more2\" price=\"49\" perMonth=\"Per Month\" middle=\"Corporate\" MB=\"512 MB Memory\" bandwidth=\"Unlimited Bandwidth\" space=\"30 GB Amount of Space\" btn=\"PURCHASE\"> \n     </Post>\n     </div>\n     <div className=\"col\">\n     <Post  first=\"third\" inner=\"more3\" price=\"99\" perMonth=\"Per Month\" middle=\"Enterprise\" MB=\"1,024 MB Memory\" bandwidth=\"Unlimited Bandwidth\" space=\"100 GB Amount of Space\" btn=\"PURCHASE\"> \n     </Post>\n     </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}